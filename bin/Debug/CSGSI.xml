<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSGSI</name>
    </assembly>
    <members>
        <member name="F:CSGSI.Events.PlayerGotKillEventArgs.Killer">
            <summary>
            The killer.
            </summary>
        </member>
        <member name="F:CSGSI.Events.PlayerGotKillEventArgs.Assister">
            <summary>
            The assister in the kill.
            </summary>
        </member>
        <member name="F:CSGSI.Events.PlayerGotKillEventArgs.Victim">
            <summary>
            The *probable* victim of the kill. The GameState does not actually contain this information, so this is just a player whos Death count went up in the same GameState.
            </summary>
        </member>
        <member name="P:CSGSI.Events.PlayerGotKillEventArgs.Weapon">
            <summary>
            The weapon that was used for the kill.
            </summary>
        </member>
        <member name="F:CSGSI.Events.RoundPhaseChangedEventArgs.PreviousPhase">
            <summary>
            The phase that was active before this event was fired.
            </summary>
        </member>
        <member name="F:CSGSI.Events.RoundPhaseChangedEventArgs.CurrentPhase">
            <summary>
            The phase that is active now.
            </summary>
        </member>
        <member name="F:CSGSI.Events.PlayerFlashedEventArgs.Player">
            <summary>
            The player that was flashed.
            </summary>
        </member>
        <member name="P:CSGSI.Events.PlayerFlashedEventArgs.Flashed">
            <summary>
            How much the player got flashed.
            </summary>
        </member>
        <member name="F:CSGSI.Events.BombPlantedEventArgs.Planter">
            <summary>
            The player that (probably) planted the bomb.
            </summary>
        </member>
        <member name="F:CSGSI.Events.BombDefusedEventArgs.Defuser">
            <summary>
            The player that defused the bomb.
            </summary>
        </member>
        <member name="F:CSGSI.Events.RoundEndEventArgs.Winner">
            <summary>
            The team that won the round that just ended.
            </summary>
        </member>
        <member name="F:CSGSI.Events.RoundBeginEventArgs.Map">
            <summary>
            Information about the map state.
            </summary>
        </member>
        <member name="P:CSGSI.Events.RoundBeginEventArgs.TotalRound">
            <summary>
            The total amount of rounds (i.e. T Score + CT Score + 1)
            </summary>
        </member>
        <member name="P:CSGSI.Events.RoundBeginEventArgs.TScore">
            <summary>
            The current score of the terrorist team.
            </summary>
        </member>
        <member name="P:CSGSI.Events.RoundBeginEventArgs.CTScore">
            <summary>
            The current score of the counter-terrorist team.
            </summary>
        </member>
        <member name="T:CSGSI.GameState">
            <summary>
            This object represents the entire game state 
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Provider">
            <summary>
            Contains information about the game that is sending the data and the Steam user that is running the game itself.
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Map">
            <summary>
            Contains information about the current map and match (i.e. match score and remaining timeouts)
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Round">
            <summary>
            Contains information about the state of the current round (e.g. phase or the winning team)
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Player">
            <summary>
            Contains information about the player (i.e. in the current POV, meaning this changes frequently during spectating)
            </summary>
        </member>
        <member name="P:CSGSI.GameState.AllPlayers">
            <summary>
            Contains information about all players
            !! This node is only available when spectating the match with access to every players' POV !!
            </summary>
        </member>
        <member name="P:CSGSI.GameState.PhaseCountdowns">
            <summary>
            Contains information about the current "phase" that the round (e.g. bomb planted) is in and how long the phase is going to last.
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Previously">
            <summary>
            When information has changed from the previous gamestate to the current one, the old values (before the change) are stored in this node.
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Added">
            <summary>
            When information has been received, that was not present in the previous gamestate, the new values are (also) stored in this node.
            </summary>
        </member>
        <member name="F:CSGSI.GameState.JSON">
            <summary>
            The JSON string that was used to generate this object
            </summary>
        </member>
        <member name="M:CSGSI.GameState.#ctor(System.String)">
            <summary>
            Initialises a new GameState object using a JSON string
            </summary>
            <param name="JSONstring"></param>
        </member>
        <member name="T:CSGSI.GameStateListener">
            <summary>
            A class that listens for HTTP POST requests
            </summary>
        </member>
        <member name="P:CSGSI.GameStateListener.CurrentGameState">
            <summary>
            The most recently received GameState
            </summary>
        </member>
        <member name="P:CSGSI.GameStateListener.Port">
            <summary>
            Gets the port that this GameStateListener instance is listening to
            </summary>
        </member>
        <member name="P:CSGSI.GameStateListener.Running">
            <summary>
            Gets a value indicating if the listening process is running
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.NewGameState">
            <summary>
            Occurs after a new GameState has been received
            </summary>
        </member>
        <member name="M:CSGSI.GameStateListener.#ctor(System.Int32)">
            <summary>
            A GameStateListener that listens for connections to http://localhost:&lt;Port&gt;/
            </summary>
            <param name="Port"></param>
        </member>
        <member name="M:CSGSI.GameStateListener.#ctor(System.String)">
            <summary>
            A GameStateListener that listens for connections to the specified URI
            </summary>
            <param name="URI">The URI to listen to</param>
        </member>
        <member name="M:CSGSI.GameStateListener.Start">
            <summary>
            Starts listening for HTTP POST requests on the specified port<para />
            </summary>
            <param name="port">The port to listen on</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:CSGSI.GameStateListener.Stop">
            <summary>
            Stops listening for HTTP POST requests
            </summary>
        </member>
        <member name="P:CSGSI.GameStateListener.EnableRaisingIntricateEvents">
            <summary>
            Determines whether intricate events such as PlayerDied are raised or ignored.
            </summary>
        </member>
        <member name="M:CSGSI.GameStateListener.ProcessGameState(CSGSI.GameState)">
            <summary>
            Processes a GameState to determine which events have to be raised.
            </summary>
            <param name="gs"></param>
        </member>
        <member name="E:CSGSI.GameStateListener.PlayerGotKill">
            <summary>
            Is raised when a player gets a kill. Includes information about the killer, the (probable) assister and the (probable) victim.<para/>
            This information is not included in the GameState, so the assister and victim are just derived from players whose Assists/Deaths variables changed.
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.RoundPhaseChanged">
            <summary>
            Is raised when the round phase changes (for example "Live", "FreezeTime" etc.).
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.PlayerFlashed">
            <summary>
            Is raised when a player is flashed. Includes information about how much the player was flashed (0 - 255).
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.BombPlanted">
            <summary>
            Is raised when the bomb is planted. Contains information about who planted the bomb.
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.BombDefused">
            <summary>
            Is raised when the bomb is defused. Contains information about the (probable) defuser (player who's Score increased with this GameState).
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.BombExploded">
            <summary>
            Is raised when the bomb explodes.
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.RoundEnd">
            <summary>
            Is raised when the round ends. Contains information about which team won the round.
            </summary>
        </member>
        <member name="E:CSGSI.GameStateListener.RoundBegin">
            <summary>
            Is raised when a round begins (i.e. exits FreezeTime). Contains information about team scores and total round amount.
            </summary>
        </member>
        <member name="T:CSGSI.Nodes.AllPlayersNode">
            <summary>
            A node that contains a list of PlayerNodes. <para/>
            This is only available when watching a demo or when spectating on a server with mp_forcecamera 1
            </summary>
        </member>
        <member name="P:CSGSI.Nodes.AllPlayersNode.Item(System.Int32)">
            <summary>
            Gets the player with index &lt;index&gt;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.Mode">
            <summary>
            The game mode (e.g. Deathmatch, Casual etc.)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.Name">
            <summary>
            The name of the current map (e.g. "de_mirage")
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.Phase">
            <summary>
            The current phase of the match (e.g. Live, Warmup etc.)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.Round">
            <summary>
            The current round number <para/>
            Attention: This is set to 0 for both warmup and pistol-round, check .Phase to prevent errors.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.TeamCT">
            <summary>
            Contains information about the Counter-Terrorist team such as current score.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.TeamT">
            <summary>
            Contains information about the Terrorist team such as current score.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.NumMatchesToWinSeries">
            <summary>
            Presumable used for tournaments.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.CurrentSpectators">
            <summary>
            The amount of people currently spectating.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapNode.SouvenirsTotal">
            <summary>
            Presumably used for tournaments to keep track of how many souvenir drops have been dropped to spectators.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapPhase.Live">
            <summary>
            Match is live.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapPhase.Intermission">
            <summary>
            Match is currently in an intermission (e.g. half time pause).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapPhase.GameOver">
            <summary>
            Match has ended (i.e. currently displaying the end scoreboard).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapMode.Casual">
            <summary>
            Casual
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapMode.Competitive">
            <summary>
            Competitive
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapMode.GunGameProgressive">
            <summary>
            Gun Game
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapMode.GunGameTRBomb">
            <summary>
            Arms Race &amp; Demolition
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.MapMode.ScrimComp2v2">
            <summary>
            Wingman
            </summary>
        </member>
        <member name="P:CSGSI.Nodes.NodeBase.HasData">
            <summary>
            Whether or not this node contains data (i.e. JSON string is not empty)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PhaseCountdownsNode.PhaseEndsIn">
            <summary>
            How long (in seconds) the current phase is going to last (unless interrupted by a phase change, i.e. Live -> Bomb).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.ObserverSlot">
            <summary>
            The id assigned to this player for observers
            Example: if ObserverSlot = 4 then a spectator can press the "4" key to switch to this players' view
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.Clan">
            <summary>
            The players clan-tag
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.Weapons">
            <summary>
            Contains information about this players' current inventory
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.MatchStats">
            <summary>
            Contains information such as kills/deaths
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.State">
            <summary>
            Contains information about the players' state (i.e. health, flashbang-status etc.)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.Position">
            <summary>
            The position of this player in the world.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerNode.Forward">
            <summary>
            The direction the player is currently facing.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerActivity.Menu">
            <summary>
            Is in a menu (also applies to opening the in game menu with ESC).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerActivity.Playing">
            <summary>
            Playing or spectating.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerActivity.TextInput">
            <summary>
            Console is open.
            </summary>
        </member>
        <member name="T:CSGSI.Nodes.Vector3">
            <summary>
            A 3 dimensional vector.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.Vector3.X">
            <summary>
            The X component of the vector (left/right).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.Vector3.Y">
            <summary>
            The Y component of the vector (up/down).
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.Vector3.Z">
            <summary>
            The Z component of the vector (forward/backward).
            </summary>
        </member>
        <member name="M:CSGSI.Nodes.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialises a new vector with the given X, Y and Z components.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSGSI.Nodes.Vector3.ToString">
            <summary>
            Generates a string formatted like so: <para/>
            (X, Y, Z)
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="F:CSGSI.Nodes.RoundNode.WinTeam">
            <summary>
            The team that won the current round (only available when Phase == Over)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerStateNode.Flashed">
            <summary>
            Goes from 0 (not flashed) to 255 (fully flashed). After getting flashed, this will slowly go back down to 0.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerStateNode.Burning">
            <summary>
            Goes from 0 (not burning) to 255 (standing in a molotov/incendiary)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.PlayerStateNode.EquipValue">
            <summary>
            The total value of the players' current weapons + equipment (armor included)
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.WeaponNode.Paintkit">
            <summary>
            The skin this weapon currently has.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.WeaponNode.AmmoClip">
            <summary>
            The current ammunition.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.WeaponNode.AmmoClipMax">
            <summary>
            The maximum ammunition per magazine.
            </summary>
        </member>
        <member name="F:CSGSI.Nodes.WeaponNode.AmmoReserve">
            <summary>
            The remaining ammunition that is not currently in the magazine.
            </summary>
        </member>
        <member name="P:CSGSI.Nodes.WeaponsNode.ActiveWeapon">
            <summary>
            The weapon/equipment the player has currently pulled out.
            </summary>
        </member>
        <member name="P:CSGSI.Nodes.WeaponsNode.Item(System.Int32)">
            <summary>
            Gets the weapon with index &lt;index&gt;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
    </members>
</doc>
